.. _interactive-development-template:

Render Template
===============

Assuming we already have a sandbox Interactive App deployed under::

  ${HOME}/ondemand/dev/my_app

The Interactive App's template is given by the ``template/`` directory located
in the root of the app directory. For our example::

  ${HOME}/ondemand/dev/my_app/template/

When an Interactive App session is first "Launched" this template is:

#. Copied to the user's home directory under an appropriately namespaced data
   root directory::

     ${HOME}/ondemand/data/sys/dashboard/batch_connect/dev/my_app/output/<session_id>/

   where the ``session_id`` is a unique id generated by the :ref:`dashboard`
   when a user first launches a session.

#. All ``*.erb`` files in this new directory are rendered using `eRuby
   (Embedded Ruby)`_ with access to the objects: ``session`` and ``context``.

#. All ``*.erb`` files are renamed with the ``erb`` extension stripped from the
   file name.

ERB Helpers
-----------

In your ERB template files you will have access to not only the Ruby standard
library but also to the two helpful objects: ``session`` and ``context``.

Session
```````

The ``session`` object describes the current Interactive App session. A few of
the helpful methods it provides are given below:

.. describe:: id (String)

   the unique id generated by the :ref:`dashboard` when the session was created

   Example
     Display session id

     .. code-block:: erb

        Current session running is <%= session.id %>

.. describe:: staged_root (Pathname)

   the directory where the session template is staged and initially run in

   Example
     Point to an image asset file in one of your template files

     .. code-block:: erb

        icon: <%= session.staged_root.join("assets", "icon.png") %>

.. describe:: cluster_id (String)

   the cluster id used to submit this session to

   Example
     Determine if Owens cluster

     .. code-block:: erb

        <% if session.cluster_id == "owens" %>
          ./run_owens_script.sh
        <% end %>

Context
```````

The ``context`` object is an object that holds **all the attributes** defined
by the :ref:`interactive-development-form`.

.. warning::

   All attributes in the ``context`` object return a Ruby ``String``. So
   conversions are necessary if you intend on operating on an attribute.

   For example, if you want to perform arithmetic on the ``bc_num_hours``
   attribute that a user filled out in the Interactive App form:

   .. code-block:: erb

      SECONDS=<%= context.bc_num_hours.to_i * 3600 %>

   Note, that we used ``#to_i`` on the string to convert it to an integer
   before performing arithmetic.

.. _eruby (embedded ruby): https://en.wikipedia.org/wiki/ERuby

Important Files
---------------

TODO

Before Hook
```````````

TODO (talk about ``host``, ``port``, and ``password``)

Main Script
```````````

TODO

After Hook
``````````

TODO

Cleanup Hook
````````````

TODO

Examples
--------

TODO???
